Q-1/Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"

Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

Answer:
public String longestCommonPrefix(String[] strs) {

String ans = strs[0]                     ;
for (int i = 1; i < strs.length; i++) {
while (strs[i].indexOf(ans) != 0) {
ans = ans.substring(0, ans.length() - 1) ;

}
}
return ans ;

}
Q-2//Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Example 3:

Input: s = "(]"
Output: false

Answer:
cpublic boolean isValid(String s) {

Stack<Character> stack = new Stack<>() ;

for (char ch : s.toCharArray()) {
switch (ch) {
case '(':
case '{':
case '[':

stack.push(ch)                               ;
break                                        ;
case ')':
if (stack.isEmpty() || stack.pop() != '(') {
return false                                 ;
}
break                                        ;

case '}':
if (stack.isEmpty() || stack.pop() != '{') {
return false                                                                                                                                                                                                                                               ;
}
break                                                                                                                                                                                                                                                      ;
case ']':
if (stack.isEmpty() || stack.pop() != '[') {
return false                                                                                                                                                                                                                                               ;
}
break                                                                                                                                                                                                                                                      ;
}
}
return stack.isEmpty()                                                                                                                                                                                                                                     ;
Q-3//
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]         ; // Input array
int[] expectedNums = [...] ; // The expected answer with correct length

int k = removeDuplicates(nums) ; // Calls your implementation

assert k == expectedNums.length   ;
for (int i = 0                    ; i < k; i++) {
assert nums[i] == expectedNums[i] ;
}

If all assertions pass, then your solution will be accepted.

Example 1:

Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Example 2:

Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Answer:
class Solution {
public int removeDuplicates(int[] nums) {

int i = 0               ;
for(int j = 1           ;j < nums.length;j++){
if(nums[i] != nums[j]){
i++                     ;
nums[i]=nums[j]         ;
}
}
return i+1              ;

}
}

Q-4//
Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

    Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
    Return k.

Custom Judge:

The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}

If all assertions pass, then your solution will be accepted.

 

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).

Answer:
class Solution {
    public int removeElement(int[] nums, int val) {

        int i = 0;
        for(int j = 0;j <nums.length;j++){
            if(nums[j] != val){
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
            }
        }
        return i;
        
    }
}